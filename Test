#include <SparkFun_TB6612.h>

#define AIN1 2
#define BIN1 7
#define AIN2 4
#define BIN2 8
#define PWMA 5
#define PWMB 6
#define STBY 9

const int offsetA = 1;
const int offsetB = -1;
Motor motor1 = Motor(AIN1, AIN2, PWMA, offsetA, STBY);
Motor motor2 = Motor(BIN1, BIN2, PWMB, offsetB, STBY);

int P, D, I, previousError, PIDvalue, error;
int lsp, rsp;
int lfspeed = 100;
float Kp = 0.6;
float Kd = 10;
float Ki = 0.1;
int minValues[6], maxValues[6], threshold[6];

void setup() {
    pinMode(11, INPUT_PULLUP);
    pinMode(12, INPUT_PULLUP);
    Serial.begin(9600);
    calibrate();
}

void loop() {
    while (1) {
        int sensorValues[6];
        for (int i = 0; i < 6; i++) {
            sensorValues[i] = analogRead(i + 1);
        }

        int position = calculatePosition(sensorValues);
        error = position - 2500; // Assuming the middle position is 2500

        P = error;
        I = I + error;
        D = error - previousError;
        PIDvalue = (Kp * P) + (Ki * I) + (Kd * D);
        previousError = error;

        lsp = lfspeed - PIDvalue;
        rsp = lfspeed + PIDvalue;
        lsp = constrain(lsp, 0, 255);
        rsp = constrain(rsp, 0, 255);

        motor1.drive(lsp);
        motor2.drive(rsp);
    }
}

void calibrate() {
    for (int i = 0; i < 6; i++) {
        minValues[i] = analogRead(i + 1);
        maxValues[i] = analogRead(i + 1);
    }
    for (int i = 0; i < 3000; i++) {
        motor1.drive(50);
        motor2.drive(-50);
        for (int j = 0; j < 6; j++) {
            int reading = analogRead(j + 1);
            if (reading < minValues[j]) {
                minValues[j] = reading;
            }
            if (reading > maxValues[j]) {
                maxValues[j] = reading;
            }
        }
    }
    for (int i = 0; i < 6; i++) {
        threshold[i] = (minValues[i] + maxValues[i]) / 2;
    }
    motor1.drive(0);
    motor2.drive(0);
}

int calculatePosition(int sensorValues[]) {
    int weightedSum = 0;
    int sum = 0;
    for (int i = 0; i < 6; i++) {
        weightedSum += sensorValues[i] * (i * 1000);
        sum += sensorValues[i];
    }
    return weightedSum / sum;
}
